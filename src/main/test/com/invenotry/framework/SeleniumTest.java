package com.invenotry.framework;

import org.testng.annotations.Test;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.util.Base64;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.ITestResult;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;
import org.openqa.selenium.remote.RemoteWebDriver;


public class SeleniumTest {
	
	static ExtentReports extent;
	static ExtentTest logger;
	static WebDriver driver;
	WebDriverWait wait;
	static String HUB_URL = "http://whkco36769dns0.eastus2.cloudapp.azure.com:8082/wd/hub";
	
	static String APPLICATION_URL = "http://ec2-3-16-37-126.us-east-2.compute.amazonaws.com/InventoryManagement/";
	
	@BeforeTest
	public void beforeTest() throws MalformedURLException  {
		extent = new ExtentReports (System.getProperty("user.dir") +"/test-output/ExtentReport.html", true);
		extent.addSystemInfo("Reports Generated By: ", "Akshata Vernekar");
		extent.loadConfig(new File(System.getProperty("user.dir")+"\\extent-config.xml"));
		
		System.setProperty("webdriver.chrome.driver", System.getProperty("user.dir")+"\\lib\\chromedriver.exe");
		
		ChromeOptions options = new ChromeOptions();
		options.setHeadless(true);
		DesiredCapabilities capabilities = DesiredCapabilities.chrome();
		capabilities.setCapability(ChromeOptions.CAPABILITY, options);
		
		driver = new RemoteWebDriver(new java.net.URL(HUB_URL), capabilities);
		driver.manage().window().maximize();
		
		wait = new WebDriverWait(driver, 10);
	}
	
	
	
	
	
	
	@Test
	void loginTest() throws IOException, InterruptedException{
		System.out.println("Login test started");
		logger = extent.startTest("Login Test", "This Test is done for testing login functionality of a application");
		loginFunction();
		System.out.println("Login test ended");
	}
	
	@Test
	void logoutTest() throws IOException, InterruptedException{
		System.out.println("Logout test started");
		logger = extent.startTest("Logout Test", "This Test is done for testing logout functionality of a application");
		logoutFunction();
		System.out.println("Logout test ended");
	}
	
	
	
	
	void loginFunction() throws IOException, InterruptedException{	
		
		driver.get(APPLICATION_URL);
		logger.log(LogStatus.PASS, "Successfully started application");		
		captureScreenshot();
		System.out.println("Successfully started application");
		wait.until(ExpectedConditions.elementToBeClickable(By.id("name"))).click();		
		wait.until(ExpectedConditions.elementToBeClickable(By.id("name"))).sendKeys("akshata");
		captureScreenshot();
		logger.log(LogStatus.PASS, "Successfully entered username");		
		System.out.println("Successfully entered username");
		wait.until(ExpectedConditions.elementToBeClickable(By.id("password"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.id("password"))).sendKeys("ak123");
		captureScreenshot();
		logger.log(LogStatus.PASS, "Successfully entered password");		
		System.out.println("Successfully entered password");
		
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id='loginapp']//input[@value='Login']"))).click();
		captureScreenshot();
		logger.log(LogStatus.PASS, "Successfully clicked on log in");	
		System.out.println("Successfully clicked on log in");
	}
	
	
	
	void logoutFunction() throws IOException, InterruptedException{
		loginFunction();
		
		wait.until(ExpectedConditions.elementToBeClickable(By.linkText("Log Out"))).click();
		captureScreenshot();
		logger.log(LogStatus.PASS, "Successfully clicked on log out");
		System.out.println("Successfully clicked on log out");
		
	}
	
	@AfterMethod
	public void afterMethod(ITestResult result) throws IOException, InterruptedException {
		if(result.getStatus() == ITestResult.FAILURE)
		{
			captureScreenshot();
			logger.log(LogStatus.FAIL, "Test Case Failed is "+ result.getName());
			logger.log(LogStatus.FAIL, "Test Case Failed is "+ result.getThrowable());
		}
		else if(result.getStatus() == ITestResult.SKIP)
		{
			logger.log(LogStatus.SKIP, "Test Case Skipped is "+result.getName());
		}
		extent.endTest(logger);
	}
	
	@AfterTest
	public void endReport()
	{
		extent.flush();
	    extent.close();
	    
	    driver.quit();
	}
	
	public static void captureScreenshot() throws IOException, InterruptedException
	   {
	        File screenshot = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);
	        File screenshotLocation = new File(System.getProperty("user.dir")+"\\pic.png");
	        FileUtils.copyFile(screenshot, screenshotLocation);
	        Thread.sleep(2000);
	        InputStream is = new FileInputStream(screenshotLocation);
	        byte[] imageBytes = IOUtils.toByteArray(is);
	        Thread.sleep(2000);
	        String base64 = Base64.getEncoder().encodeToString(imageBytes);
	        logger.log(LogStatus.INFO, "Snapshot below: " + logger.addBase64ScreenShot("data:image/png;base64,"+base64));       
	   }


}
